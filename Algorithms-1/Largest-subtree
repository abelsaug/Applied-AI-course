# Python program for Bellman-Ford's single source
# shortest path algorithm.

from collections import defaultdict

#Class to represent a graph
class Graph:

    def __init__(self,vertices):
        self.V= vertices #No. of vertices
        self.graph = [] # default dictionary to store graph

    # function to add an edge to graph
    def addEdge(self,u,v,w):
        self.graph.append([u, v, w])

    # utility function used to print the solution
    def printArr(self, dist):
        print("Vertex   Distance from Source")
        for i in range(self.V):
            print("%d \t\t %d" % (i, dist[i]))

    # The main function that finds largest distances from src to
    # all other vertices using Bellman-Ford algorithm.
    def ModifiedBellmanFord(self, src):

        # Step 1: Initialize distances from src to all other vertices
        # as INFINITE
        dist = [(float("-Inf"))] * self.V
        dist[src] = 0


        # Step 2: Relax all edges |V| - 1 times. A simple shortest
        # path from src to any other vertex can have at-most |V| - 1
        # edges
        for i in range(self.V - 1):
            # Update dist value and parent index of the adjacent vertices of
            # the picked vertex. Consider only those vertices which are still in
            # queue
            for u, v, w in self.graph:
                if dist[u] != float("-Inf") and dist[u] + w > dist[v]:
                        dist[v] = dist[u] + w



        for u, v, w in self.graph:

        # print all distance
        self.printArr(dist)

        graph1 = {
    'A' : ['B','S'],
    'B' : ['A'],
    'C' : ['D','E','F','S'],
    'D' : ['C'],
    'E' : ['C','H'],
    'F' : ['C','G'],
    'G' : ['F','S'],
    'H' : ['E','G'],
    'S' : ['A','C','G']
}

visited = []

def dfs(graph,node):
    global visited
    if node not in visited:
        visited.append(node)
        for u, v, w in self.graph:
            dfs(graph,n)

dfs(graph1,'A')
print(visited)



g = Graph(15)
g.addEdge(0, 1, -1)
g.addEdge(0, 2, 4)
g.addEdge(1, 3, 3)
g.addEdge(1, 4, 2)
g.addEdge(2, 5, 2)
g.addEdge(2, 6, 5)
g.addEdge(3, 7, 1)
g.addEdge(3, 8, -3)
g.addEdge(4, 9, 4)
g.addEdge(4, 10, 7)
g.addEdge(5, 11, 0)
g.addEdge(5, 12, -3)
g.addEdge(6, 13, 8)
g.addEdge(6,  14, 4)


#Print the solution
g.ModifiedBellmanFord(0)
